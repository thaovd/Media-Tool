import os
import yt_dlp
from tkinter import ttk, StringVar, Menu, Toplevel, Label, Button, Text, BOTH, WORD, messagebox, filedialog
import tkinter as tk
from getinfo import get_video_info
from io import BytesIO
from PIL import Image, ImageTk
import requests
import re
import subprocess

script_dir = "ffmpeg.exe"
ffmpeg_path = script_dir
#script_dir = os.path.dirname(os.path.abspath(__file__))
#ffmpeg_path = os.path.join(script_dir, 'ffmpeg.exe')

class YTDownloader:
    def __init__(self, master, app):
        self.master = master
        self.app = app

        # Input Select Frame
        self.yt_downloader_frame = ttk.LabelFrame(master, text="Tiktok, YouTube, Facebook, Drive Downloader v.v..", style="CustomLabelFrame.TLabelframe")
        self.yt_downloader_frame.pack(padx=20, pady=20, fill="both", expand=True)

        self.yt_url_label = ttk.Label(self.yt_downloader_frame, text="Link Video:", style="CustomSmallLabel.TLabel")
        self.yt_url_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")

        self.yt_url_entry = ttk.Entry(self.yt_downloader_frame, style="CustomEntry.TEntry")
        self.yt_url_entry.grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="we")
        self.yt_url_entry.bind("<Control-v>", self.on_url_entry_paste)  # G·∫Øn s·ª± ki·ªán Ctrl+V
        self.yt_url_entry.bind("<Button-3>", self.show_right_click_menu)  # G·∫Øn s·ª± ki·ªán chu·ªôt ph·∫£i

        self.right_click_menu = Menu(self.yt_url_entry, tearoff=0)
        self.right_click_menu.add_command(label="Copy", command=self.copy_text)
        self.right_click_menu.add_command(label="Paste", command=self.paste_text)
        self.right_click_menu.add_command(label="Clear", command=self.clear_text)


        # Save Folder Select Frame
        self.save_location_label = ttk.Label(self.yt_downloader_frame, text="Ch·ªçn n∆°i l∆∞u:", style="CustomSmallLabel.TLabel")
        self.save_location_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")

        self.save_location_var = StringVar()
        self.save_location_entry = ttk.Entry(self.yt_downloader_frame, textvariable=self.save_location_var, style="CustomEntry.TEntry")
        self.save_location_entry.grid(row=1, column=1, padx=10, pady=20, sticky="we")

        self.save_location_button = ttk.Button(self.yt_downloader_frame, text="üëÜ Ch·ªçn Folder", command=self.choose_save_location, style="CustomButton.TButton")
        self.save_location_button.grid(row=1, column=2, padx=10, pady=5, sticky="w")

        self.audio_only_button = ttk.Button(self.yt_downloader_frame, text="‚ô´ Audio only", command=lambda: self.download_audio_only(), style="CustomButton.TButton")
        self.audio_only_button.grid(row=2, column=0, padx=10, pady=5, sticky="w")

        self.video_only_button = ttk.Button(self.yt_downloader_frame, text="‚ñ∂ Video only (Max)", command=lambda: self.download_video_only(), style="CustomButton.TButton")
        self.video_only_button.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        self.audio_video_button = ttk.Button(self.yt_downloader_frame, text="üé¨ A+V (Max)", command=lambda: self.download_audio_and_video(), style="CustomButton.TButton")
        self.audio_video_button.grid(row=2, column=2, padx=10, pady=5, sticky="w")

        self.tiktok_button = ttk.Button(self.yt_downloader_frame, text="üé∂ A+V Tiktok (Max)", command=lambda: self.download_tiktok(), style="CustomButton.TButton")
        self.tiktok_button.grid(row=3, column=0, padx=10, pady=5, sticky="w")

        self.custom_download_button = ttk.Button(self.yt_downloader_frame, text="‚ò∞ L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng kh√°c", command=self.show_custom_download_popup, style="CustomButton.TButton")
        self.custom_download_button.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        self.m3u8_button = ttk.Button(self.yt_downloader_frame, text="Download m3u8 Video", command=lambda: self.download_m3u8(), style="CustomButton.TButton")
        self.m3u8_button.grid(row=3, column=2, padx=10, pady=5, sticky="w")

        # Playlist download button
        self.playlist_download_button = ttk.Button(self.yt_downloader_frame, text="üìº Download Playlist", command=self.download_playlist, style="CustomButton.TButton")
        self.playlist_download_button.grid(row=4, column=0, padx=10, pady=5, sticky="w")

        self.open_yt_folder_button = ttk.Button(self.yt_downloader_frame, text="üìÅ M·ªü th∆∞ m·ª•c Download", command=self.open_folder, style="CustomButton.TButton")
        self.open_yt_folder_button.grid(row=4, column=1, columnspan=2, padx=10, pady=5, sticky="w")

        self.progress_bar = ttk.Progressbar(self.yt_downloader_frame, mode='determinate', length=540)  # Increased progress bar length to 500 pixels
        self.progress_bar.grid(row=5, column=0, columnspan=3, padx=10, pady=10)

        # Guide Button
        self.user_guide_button = ttk.Button(self.yt_downloader_frame, text="üìú H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng", command=self.show_user_guide, style="CustomButton.TButton")
        self.user_guide_button.grid(row=4, column=2, padx=10, pady=5, sticky="w" )

        # Video information
        self.video_info_frame = ttk.Frame(self.yt_downloader_frame)
        self.video_info_frame.grid(row=6, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

        self.thumbnail_label = ttk.Label(self.video_info_frame)
        self.thumbnail_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        self.video_info_container = ttk.Frame(self.video_info_frame)
        self.video_info_container.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        self.title_label = ttk.Label(self.video_info_container, text="", style="CustomBoldLabel.TLabel", wraplength=400)
        self.title_label.pack(pady=5, anchor="w")

        self.length_label = ttk.Label(self.video_info_container, text="", style="CustomLabel.TLabel")
        self.length_label.pack(pady=5, anchor="w")

        self.resolutions_label = ttk.Label(self.video_info_container, text="", style="CustomLabel.TLabel", wraplength=400)
        self.resolutions_label.pack(pady=5, anchor="w")



    def on_url_entry_paste(self, event):
        self.yt_url_entry.after(100, self.on_url_entry_focus_out)  # Delay 100ms xong m·ªõi g·ªçi on_url_entry_focus_out

    def on_url_entry_focus_out(self, event=None):
        video_url = self.yt_url_entry.get()
        if video_url:
            # Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† playlist kh√¥ng
            if 'list=' in video_url:
                self.app.status_bar.config(text="URL playlist. S·ª≠ d·ª•ng t√≠nh nƒÉng Download Playlist.", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='disabled')
                self.audio_only_button.config(state='disabled')
                self.video_only_button.config(state='disabled')
                self.audio_video_button.config(state='disabled')
                self.tiktok_button.config(state='disabled')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='normal')
                
                return

            # Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† Google Drive kh√¥ng
            if 'drive.google.com' in video_url:
                self.app.status_bar.config(text="ƒêang l·∫•y th√¥ng tin video...", style="CustomStatusBar.TLabel")
                self.master.update()
                video_info = get_video_info(video_url)
                self.update_video_info(video_info)
                self.app.status_bar.config(text="URL Google Drive. S·ª≠ d·ª•ng t√≠nh nƒÉng 'L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng kh√°c' ƒë·ªÉ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='normal')
                self.audio_only_button.config(state='disabled')
                self.video_only_button.config(state='disabled')
                self.audio_video_button.config(state='disabled')
                self.tiktok_button.config(state='disabled')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='disabled')
                return
            if 'tiktok.com' in video_url:
                self.app.status_bar.config(text="ƒêang l·∫•y th√¥ng tin video...", style="CustomStatusBar.TLabel")
                self.master.update()
                video_info = get_video_info(video_url)
                self.update_video_info(video_info)
                self.app.status_bar.config(text="", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='normal')
                self.audio_only_button.config(state='disabled')
                self.video_only_button.config(state='disabled')
                self.audio_video_button.config(state='disabled')
                self.tiktok_button.config(state='normal')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='disabled')
                return
            if 'youtube.com' in video_url:
                self.app.status_bar.config(text="ƒêang l·∫•y th√¥ng tin video...", style="CustomStatusBar.TLabel")
                self.master.update()
                video_info = get_video_info(video_url)
                self.update_video_info(video_info)
                self.app.status_bar.config(text="", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='normal')
                self.audio_only_button.config(state='normal')
                self.video_only_button.config(state='normal')
                self.audio_video_button.config(state='normal')
                self.tiktok_button.config(state='disabled')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='disabled')
                return
            if 'facebook.com' in video_url:
                self.app.status_bar.config(text="ƒêang l·∫•y th√¥ng tin video...", style="CustomStatusBar.TLabel")
                self.master.update()
                video_info = get_video_info(video_url)
                self.update_video_info(video_info)
                self.app.status_bar.config(text="", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='normal')
                self.audio_only_button.config(state='normal')
                self.video_only_button.config(state='normal')
                self.audio_video_button.config(state='normal')
                self.tiktok_button.config(state='disabled')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='disabled')
                return


            # Hi·ªÉn th·ªã th√¥ng b√°o "ƒêang l·∫•y th√¥ng tin video" tr√™n thanh tr·∫°ng th√°i
            self.app.status_bar.config(text="ƒêang l·∫•y th√¥ng tin video...", style="CustomStatusBar.TLabel")
            self.master.update()
            video_info = get_video_info(video_url)
            self.update_video_info(video_info)

            # Reset th√¥ng b√°o thanh tr·∫°ng th√°i
            self.app.status_bar.config(text="", style="CustomStatusBar.TLabel")
            self.master.update()

    # Kh·ªëi x·ª≠ l√Ω l·∫•y th√¥ng tin video
    def update_video_info(self, video_info):
        self.thumbnail_label.configure(image=None) 
        self.thumbnail_label.image = None 

        if video_info['thumbnail']:
            try:
                # Download the thumbnail image
                response = requests.get(video_info['thumbnail'])
                img_data = response.content
                img = Image.open(BytesIO(img_data))

                # Resize the thumbnail to fit the desired dimensions
                if img.width > img.height:
                    img = img.resize((120, 90), resample=Image.BICUBIC)
                else:
                    img = img.resize((90, 120), resample=Image.BICUBIC)

                photo = ImageTk.PhotoImage(img)
                self.thumbnail_label.configure(image=photo)
                self.thumbnail_label.image = photo
            except Exception as e:
                print(f"L·ªói t·∫£i xu·ªëng thumbnail: {e}")
                self.thumbnail_label.configure(text="Thumbnail kh√¥ng kh·∫£ d·ª•ng")
                self.thumbnail_label.image = None 
        else:
            self.thumbnail_label.configure(text="Thumbnail kh√¥ng kh·∫£ d·ª•ng")
            self.thumbnail_label.image = None 

        title = video_info['title']
        self.title_label.configure(text=f"Ti√™u ƒë·ªÅ: {title}", wraplength=350) 

        resolutions_text = f"ƒê·ªô ph√¢n gi·∫£i: {video_info['resolutions']}"
        self.resolutions_label.configure(text=resolutions_text, wraplength=350)
        self.length_label.configure(text=f"Th·ªùi l∆∞·ª£ng: {video_info['length']}")

    def show_user_guide(self):
        user_guide_window = Toplevel(self.master)
        user_guide_window.title("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        user_guide_window.geometry("600x400")



        # CƒÉn gi·ªØa c·ª≠a s·ªï
        screen_width = user_guide_window.winfo_screenwidth()
        screen_height = user_guide_window.winfo_screenheight()
        window_width = 600
        window_height = 400
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        user_guide_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        user_guide_text = Text(user_guide_window, wrap=WORD)
        user_guide_text.pack(fill=BOTH, expand=True)

        with open("guildesocialdownload.txt", "r", encoding="utf-8") as file:
            user_guide_content = file.read()
        user_guide_text.insert("1.0", user_guide_content)
        user_guide_text.config(state="disabled")

        # Close button
        close_button = ttk.Button(user_guide_window, text="ƒê√≥ng", command=user_guide_window.destroy)
        close_button.pack(pady=10)

    def show_right_click_menu(self, event):
        self.right_click_menu.post(event.x_root, event.y_root)

    def copy_text(self):
        self.yt_url_entry.clipboard_clear()
        self.yt_url_entry.clipboard_append(self.yt_url_entry.get())

    def paste_text(self):
        self.yt_url_entry.delete(0, tk.END)
        self.yt_url_entry.insert(0, self.yt_url_entry.clipboard_get())
        self.on_url_entry_focus_out((self.yt_url_entry.get()))

    def clear_text(self):
        self.yt_url_entry.delete(0, tk.END)
        

    def choose_save_location(self):
        save_location = filedialog.askdirectory(title="Choose Save Location")
        if save_location:
            self.save_location_var.set(save_location)

    def download_audio_only(self):
        if self.save_location_var.get():
            self.download_video(format='bestaudio[ext=m4a]')
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_video_only(self):
        if self.save_location_var.get():
            self.download_video(format='bv[ext=mp4]')
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_audio_and_video(self):
        if self.save_location_var.get():
            self.download_video(format='bv*[ext=mp4]+ba')
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_tiktok(self):
        if self.save_location_var.get():
            self.download_video()
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def show_custom_download_popup(self):
        # Check if save location is selected
        if not self.save_location_var.get():
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()
            return

        video_url = self.yt_url_entry.get()
        if video_url:
            # Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† playlist kh√¥ng
            if 'list=' in video_url:
                self.app.status_bar.config(text="URL n√†y l√† Playlist video. S·ª≠ d·ª•ng t√≠nh nƒÉng Download Playlist.", style="CustomStatusBar.TLabel")
                self.master.update()
                return


            self.custom_download_popup = Toplevel(self.master)
            self.custom_download_popup.title("L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng Video")

            # CƒÉn gi·ªØa c·ª≠a s·ªï
            screen_width = self.custom_download_popup.winfo_screenwidth()
            screen_height = self.custom_download_popup.winfo_screenheight()
            window_width = 400
            window_height = 200
            x = (screen_width - window_width) // 2
            y = (screen_height - window_height) // 2
            self.custom_download_popup.geometry(f"{window_width}x{window_height}+{x}+{y}")

            # Hi·ªÉn th·ªã th√¥ng b√°o "ƒêang l·∫•y d·ªØ li·ªáu video" trong khi t·∫£i d·ªØ li·ªáu
            self.custom_download_popup.protocol("WM_DELETE_WINDOW", self.on_custom_download_popup_close)
            loading_label = Label(self.custom_download_popup, text="ƒêang l·∫•y d·ªØ li·ªáu video...")
            loading_label.pack(pady=20)
            self.custom_download_popup.update()

            # L·∫•y video formats c√≥ s·∫µn
            ydl_opts = {}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=False)
                formats = info.get('formats', [])

            # T·∫°o danh s√°ch ch·∫•t l∆∞·ª£ng video
            quality_options = []
            seen_qualities = set()
            for format in formats:
                if format.get('vcodec') != 'none':
                    quality = f"{format.get('height')}p {format.get('ext')}"
                    if quality not in seen_qualities:
                        quality_options.append(quality)
                        seen_qualities.add(quality)

            # Xo√° nh·ªØng th√¥ng tin video ko c·∫ßn thi·∫øt
            loading_label.destroy()
            self.selected_quality = StringVar()
            self.selected_quality.set(quality_options[0])

            quality_label = Label(self.custom_download_popup, text="L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng Video:")
            quality_label.pack(pady=10)

            quality_dropdown = ttk.Combobox(self.custom_download_popup, textvariable=self.selected_quality, values=quality_options)
            quality_dropdown.pack(pady=10)

            download_button = Button(self.custom_download_popup, text="Download", command=self.download_custom_video_and_close)
            download_button.pack(pady=10)

    def on_custom_download_popup_close(self):
        self.custom_download_popup.destroy()

    def download_custom_video_and_close(self):
        self.custom_download_popup.destroy()
        self.download_custom_video()

    def download_custom_video(self):
        video_url = self.yt_url_entry.get()
        save_location = self.save_location_var.get()
        if save_location:
            selected_quality = self.selected_quality.get()
            height, ext = selected_quality.split(" ")
            height = int(height[:-1])

            output_file = f"{save_location}/%(title)s.%(id)s.%(ext)s"
            self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng...", style="CustomStatusBar.TLabel")
            self.master.update()

            try:
                ydl_opts = {
                    'outtmpl': output_file,
                    'format': f'bestvideo[height<={height}][ext={ext}]+bestaudio[ext=m4a]/best[ext={ext}]',
                    'quiet': True,
                    'no_warnings': True,
                    'ignoreerrors': True,
                    'progress_hooks': [self.show_progress],
                    'ffmpeg_location': ffmpeg_path,
                }
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([video_url])
                self.app.status_bar.config(text="ƒê√£ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.custom_download_popup.destroy()
            except Exception as e:
                self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_m3u8(self):
        video_url = self.yt_url_entry.get()
        save_location = self.save_location_var.get()
        if video_url and save_location:
            # Check playlist
            if 'list=' in video_url:
                self.app.status_bar.config(text="H√£y s·ª≠ d·ª•ng t√≠nh nƒÉng Download Playlist ƒë·ªÉ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.master.update()
                return

            # Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† Google Drive kh√¥ng
            if 'drive.google.com' in video_url:
                self.app.status_bar.config(text="ƒê√¢y l√† URL Google Drive. Vui l√≤ng s·ª≠ d·ª•ng t√≠nh nƒÉng 'L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng kh√°c' ƒë·ªÉ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.master.update()
                return

            output_file = f"{save_location}/%(title)s.%(id)s.%(ext)s"
            self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng...", style="CustomStatusBar.TLabel")
            self.master.update()

            try:
                ydl_opts = {
                    'outtmpl': output_file,
                    'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                    'quiet': True,
                    'no_warnings': True,
                    'ignoreerrors': True,
                    'progress_hooks': [self.show_progress],
                    'cookiefile': 'cookies.txt',
                    'ffmpeg_location': ffmpeg_path,
                }
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([video_url])
                self.app.status_bar.config(text="ƒê√£ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            except Exception as e:
                self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_playlist(self):
        video_url = self.yt_url_entry.get()
        save_location = self.save_location_var.get()
        if video_url and save_location:
            # Check playlist
            if 'list=' in video_url:
                self.app.status_bar.config(text="ƒêang l·∫•y d·ªØ li·ªáu...", style="CustomStatusBar.TLabel")
                self.master.update()

                # L·∫•y s·ªë l∆∞·ª£ng video c√≥ trong playlist
                ydl_opts = {
                        'ignoreerrors': True
                        }
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(video_url, download=False)
                    num_videos = len(info.get('entries', []))

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng video trong playlist & h·ªèi
                if messagebox.askyesno("X√°c nh·∫≠n Download Playlist", f"Playlist n√†y c√≥ {num_videos} videos. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫£i xu·ªëng kh√¥ng?"):
                    output_file = f"{save_location}/%(playlist_title)s/%(title)s.%(id)s.%(ext)s"
                    self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng playlist...", style="CustomStatusBar.TLabel")
                    self.master.update()

                    try:
                        ydl_opts = {
                            'outtmpl': output_file,
                            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                            'quiet': True,
                            'no_warnings': True,
                            'ignoreerrors': True,
                            'progress_hooks': [self.show_progress],
                            'ffmpeg_location': ffmpeg_path,
                        }
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            ydl.download([video_url])
                        self.app.status_bar.config(text="ƒê√£ t·∫£i xu·ªëng playlist.", style="CustomStatusBar.TLabel")
                    except Exception as e:
                        self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")
                    finally:
                        self.master.update()
            else:
                self.app.status_bar.config(text="URL kh√¥ng ph·∫£i l√† playlist.", style="CustomStatusBar.TLabel")
                self.master.update()
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def download_video(self, format=None):
        video_url = self.yt_url_entry.get()
        save_location = self.save_location_var.get()
        if video_url and save_location:
            # Check playlist
            if 'list=' in video_url:
                self.app.status_bar.config(text="H√£y s·ª≠ d·ª•ng t√≠nh nƒÉng Download Playlist ƒë·ªÉ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.master.update()
                return

            # Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† Google Drive kh√¥ng
            if 'drive.google.com' in video_url:
                self.app.status_bar.config(text="ƒê√¢y l√† URL Google Drive. Vui l√≤ng s·ª≠ d·ª•ng t√≠nh nƒÉng 'L·ª±a ch·ªçn ch·∫•t l∆∞·ª£ng kh√°c' ƒë·ªÉ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                self.master.update()
                self.custom_download_button.config(state='normal')
                self.audio_only_button.config(state='disabled')
                self.video_only_button.config(state='disabled')
                self.audio_video_button.config(state='disabled')
                self.tiktok_button.config(state='disabled')
                self.m3u8_button.config(state='disabled')
                self.playlist_download_button.config(state='disabled')
                return

            # Get video information
            ydl_opts = {}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=False)
                title = info.get('title', 'Unknown')
                vcodec = info.get('vcodec', 'none')
                ext = info.get('ext', 'mp4')

            # Sanitize the title to remove special characters
            sanitized_title = self.sanitize_filename(title)

            output_file = os.path.join(save_location, f"{sanitized_title}.{ext}")
            print(f"{output_file}")

            # Check if the video codec is different from avc1
            if vcodec != 'avc1.42001E' and vcodec != 'hev1.1.6.L93.B0' and vcodec != 'h265' and vcodec != 'h264':
                response = messagebox.askyesnocancel("L·ª±a ch·ªçn ki·ªÉu Download", f"Video n√†y l√† Codec {vcodec} kh√¥ng ph√π h·ª£p v·ªõi Adobe Premiere Pro. B·∫°n c√≥ mu·ªën chuy·ªÉn ƒë·ªïi sang h264 kh√¥ng? Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian ƒë·ªÉ ho√†n th√†nh")
                if response is None:
                    return
                elif response:
                    self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng...", style="CustomStatusBar.TLabel")
                    self.master.update()

                    try:
                        ydl_opts = {
                            'outtmpl': output_file,
                            'format': format if format else 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                            'quiet': True,
                            'no_warnings': True,
                            'ignoreerrors': True,
                            'progress_hooks': [self.show_progress],
                            'ffmpeg_location': ffmpeg_path,
                        }
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            ydl.download([video_url])

                        # Convert the video to h264 format using ffmpeg
                        self.app.status_bar.config(text="ƒêang chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng codec video... Qu√° tr√¨nh n√£y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian", style="CustomStatusBar.TLabel")
                        self.master.update()
                        converted_file = os.path.splitext(output_file)[0] + "_convert.mp4"
                        inputfile = output_file
                        if not os.path.exists(inputfile):
                            # N·∫øu ffmpeg kh√¥ng t√¨m th·∫•y video mp4, d√πng video webm l√†m thay th·∫ø
                            inputfile = output_file.replace('.mp4', '.webm')
                        subprocess.run([ffmpeg_path, "-y", "-hwaccel", "cuda", "-i", inputfile, "-c:v", "libx264", "-crf", "23", converted_file], check=True)
                        os.remove(output_file)
                        self.app.status_bar.config(text="Ho√†n th√†nh.", style="CustomStatusBar.TLabel")
                        messagebox.showinfo("Ho√†n th√†nh", "ƒê√£ t·∫£i xu·ªëng v√† chuy·ªÉn ƒë·ªïi codec c·ªßa video th√†nh avc1.h264.")

                    except Exception as e:
                        self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")

                elif response == False:
                    self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng...", style="CustomStatusBar.TLabel")
                    self.master.update()

                    try:
                        ydl_opts = {
                            'outtmpl': output_file,
                            'format': format if format else 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                            'quiet': True,
                            'no_warnings': True,
                            'ignoreerrors': True,
                            'progress_hooks': [self.show_progress],
                            'ffmpeg_location': ffmpeg_path,
                        }
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            ydl.download([video_url])
                        self.app.status_bar.config(text="ƒê√£ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                    except Exception as e:
                        self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")
            else:
                self.app.status_bar.config(text="ƒêang t·∫£i xu·ªëng...", style="CustomStatusBar.TLabel")
                self.master.update()

                try:
                    ydl_opts = {
                        'outtmpl': output_file,
                        'format': format if format else 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                        'quiet': True,
                        'no_warnings': True,
                        'ignoreerrors': True,
                        'progress_hooks': [self.show_progress],
                        'ffmpeg_location': ffmpeg_path,
                    }
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([video_url])
                    self.app.status_bar.config(text="ƒê√£ t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
                except Exception as e:
                    self.app.status_bar.config(text="L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau.", style="CustomStatusBar.TLabel")
        else:
            self.app.status_bar.config(text="Vui l√≤ng ch·ªçn Folder l∆∞u tr∆∞·ªõc khi t·∫£i xu·ªëng.", style="CustomStatusBar.TLabel")
            self.master.update()

    def sanitize_filename(self, filename):
        sanitized = re.sub(r'[^\w\-_\. ]', '_', filename)
        if len(sanitized) > 240:
            sanitized = sanitized[:237] + '...'
        return sanitized


    def open_folder(self):
        save_location = self.save_location_var.get()
        if save_location:
            os.startfile(save_location)
        else:
            self.app.status_bar.config(text="Ch∆∞a ch·ªçn Folder l∆∞u.", style="CustomStatusBar.TLabel")


    def show_progress(self, progress):
        if progress['status'] == 'downloading':
            percentage = progress['_percent_str']
            download_speed = self.format_bytes(progress.get('speed', 0))
            eta = self.format_time(progress.get('eta', 0))
            if 'total_bytes' in progress:
                self.progress_bar['value'] = progress['downloaded_bytes'] / progress['total_bytes'] * 100
            elif 'total_bytes_estimate' in progress:
                self.progress_bar['value'] = progress['downloaded_bytes'] / progress['total_bytes_estimate'] * 100
            else:
                self.progress_bar['value'] = 0 
            self.app.status_bar.config(text=f"ƒêang t·∫£i xu·ªëng... | T·ªëc ƒë·ªô: {download_speed}/s | C√≤n l·∫°i: {eta}")
            self.master.update()

    def format_bytes(self, bytes):
        if bytes is None:
            return "N/A"
        suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
        suffix_index = 0
        while bytes >= 1024 and suffix_index < len(suffixes) - 1:
            bytes /= 1024
            suffix_index += 1
        return f"{bytes:.2f} {suffixes[suffix_index]}"

    def format_time(self, seconds):
        if seconds is None:
            return "N/A"
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes:02d}:{secs:02d}"
        
    
        

       
